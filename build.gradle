buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'io.freefair.lombok' version '8.4'
}

group = 'com.migration'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Java EE / Jakarta EE APIs
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'org.hibernate.validator:hibernate-validator:6.2.5.Final'
    implementation 'javax.el:javax.el-api:3.0.0'
    implementation 'org.glassfish:javax.el:3.0.0'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.named('test') {
    useJUnitPlatform()
}

// Automatic dependency management
tasks.register('downloadDependencies') {
    doLast {
        configurations.all { configuration ->
            if (configuration.canBeResolved) {
                configuration.resolve()
            }
        }
    }
}

// IDE Integration
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
        defaultOutputDir = file('build/classes/main')
    }
}

// Spring Boot specific configuration
springBoot {
    buildInfo()
}

bootJar {
    mainClass = 'com.migration.Main'
    archiveClassifier = ''
}

bootRun {
    systemProperties = System.properties
}

// Ensure dependencies are downloaded before build
build.dependsOn downloadDependencies

// Enable annotation processing
tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
    options.encoding = 'UTF-8'
}
